apply plugin: 'maven-publish'

ext.licenseFile = files("$rootDir/LICENSE.txt")

def pubVersion = '0.9.3'

def outputsFolder = file("$buildDir/outputs")

def versionFile = file("$outputsFolder/version.txt")

def artifactGroupId = 'com.thethriftybot.frc'
def baseArtifactId = 'ThriftyLib'

task outputVersions() {
    description = 'Prints the versions of wpilib to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

task libraryBuild() {}

build.dependsOn outputVersions

task copyAllOutputs(type: Copy) {
    destinationDir file("$buildDir/allOutputs")
    from versionFile
    dependsOn outputVersions
}

build.dependsOn copyAllOutputs
copyAllOutputs.dependsOn outputVersions

ext.addTaskToCopyAllOutputs = { task ->
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archiveFile
    copyAllOutputs.from task.archiveFile
}

def driverZipBaseName = "_GROUP_com_vendor_frc_ID_${baseArtifactId}-driver_CLS"
// def zipBaseName = "_GROUP_com_vendor_frc_ID_${baseArtifactId}-cpp_CLS"
def javaBaseName = "_GROUP_com_vendor_frc_ID_${baseArtifactId}-java_CLS"

// task cppHeadersZip(type: Zip) {
//     destinationDirectory = outputsFolder
//     archiveBaseName = zipBaseName
//     archiveClassifier = "headers"

//     from(licenseFile) {
//         into '/'
//     }

//     from('src/main/native/include') {
//         into '/'
//     }
// }

// task cppSourceZip(type: Zip) {
//     destinationDirectory = outputsFolder
//     archiveBaseName = zipBaseName
//     archiveClassifier = "sources"

//     from(licenseFile) {
//         into '/'
//     }

//     from('src/main/native/cpp') {
//         into '/'
//     }
// }

// task cppDriverHeadersZip(type: Zip) {
//     destinationDirectory = outputsFolder
//     archiveBaseName = driverZipBaseName
//     archiveClassifier = "headers"

//     from(licenseFile) {
//         into '/'
//     }

//     from('src/main/driver/include') {
//         into '/'
//     }
// }

// build.dependsOn cppHeadersZip
// addTaskToCopyAllOutputs(cppHeadersZip)
// build.dependsOn cppSourceZip
// addTaskToCopyAllOutputs(cppSourceZip)
// build.dependsOn cppDriverHeadersZip
// addTaskToCopyAllOutputs(cppDriverHeadersZip)

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task outputJar(type: Jar, dependsOn: classes) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    from sourceSets.main.output
}

task outputSourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task outputJavadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives outputJar
    archives outputSourcesJar
    archives outputJavadocJar
}

addTaskToCopyAllOutputs(outputSourcesJar)
addTaskToCopyAllOutputs(outputJavadocJar)
addTaskToCopyAllOutputs(outputJar)

build.dependsOn outputSourcesJar
build.dependsOn outputJavadocJar
build.dependsOn outputJar

libraryBuild.dependsOn build

def releasesRepoUrl = "$buildDir/repos/releases"



task cleanReleaseRepo(type: Delete) {
    delete releasesRepoUrl
}

tasks.matching {it != cleanReleaseRepo}.all {it.dependsOn cleanReleaseRepo}

model {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = artifactGroupId
                artifactId = "${baseArtifactId}-java"
                version = pubVersion
                artifact sourcesJar
                artifact javadocJar
                artifact jar
                pom {
                    name = 'ThriftyLib'
                    description = 'ThriftyLib for FRC'
                    packaging = 'jar'
                }
            }
        }
        
        repositories {
            maven {
                name = 'localRepo'
                url = "$buildDir/maven-repo"
            }
        }
    }
}
